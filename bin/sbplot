#!/usr/bin/env python

#------------------------------------------------------------
# Plotting tool for FRD/ZMA files.
#
import sys
import os
import numpy as np
import argparse
import textwrap
import matplotlib.pyplot as plt
from matplotlib import rc
#------------------------------------------------------------

# fonts
GFONTSIZE=18
rc('text',usetex=True)
rc('font',size=GFONTSIZE)

# Plot frame and axis setup
def plotsetup(phase,ext):

    FHZ=r'$f\,(\mathrm{Hz})$'
    SPL=r'$\mathrm{SPL}\,\mathrm{(dB)}$'
    PHASE=r'$\mathrm{Phase}\,\mathrm{(deg)}$'
    IMP=r'$|Z|\,(\Omega)$'
    TICKS=[10,20,50,100,200,500,1000,2000,5000,10000,20000]
    LABELS=[r'$10$',r'$20$',r'$50$',r'$100$',r'$200$',r'$500$',
            r'$1\mathrm{k}$',r'$2\mathrm{k}$',r'$5\mathrm{k}$',r'$10\mathrm{k}$',r'$20\mathrm{k}$']

    fig = plt.figure(figsize=(xs,ys))

    ax = fig.add_subplot(111)

    if title != 'null':
        ax.set_title(r'$\mathrm{' + title + '}$', size=18)

    ax.grid(which="major", ls="-", alpha=0.4)
    ax.grid(which="minor", ls=":", alpha=0.4)
    ax.set_xlabel(FHZ)
    ax.set_xscale('log')
    ax.set_xticks(TICKS)
    ax.set_xticklabels(LABELS)

    if phase:
        # Plot phase
        ax.set_ylim(-180,180)
        if ext == '.frd' or ext == '.FRD':
            ax.set_ylabel(r'$\arg(\mathrm{SPL}) ~ (\mathrm{degrees})$')
        else:
            ax.set_ylabel(r'$\arg(Z) ~ (\mathrm{degrees})$')
    else:
        # Plot SPL
        if ext == '.frd' or ext == '.FRD':
            ax.set_ylabel(SPL)
        else:
            ax.set_ylabel(IMP)

    return plt,ax

# Command line option parser
def opts():

    mytext = '''\
    description:
       sbplot is a flexible tool to plot frd files (containing SPL data) and
       zma files (containined impedance data).
    '''

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        prog = 'sbplot',
        description="Speakerbench Plot",
        epilog=textwrap.dedent(mytext))
    
    parser.add_argument('-i',
                        help="Speakerbench PLT file",
                        type=str,
                        default='null',
                        metavar='PLTFILES')

    parser.add_argument('-c',
                        help="comma-separated list of frd or zma files",
                        type=str,
                        default='null')

    parser.add_argument('-loc',
                        help="legend quadrant (1-4)",
                        type=int,
                        default=1)
      
    parser.add_argument('-amin',
                        help="amplitude minimum",
                        type=str,
                        default='auto')

    parser.add_argument('-amax',
                        help="amplitude maximum",
                        type=str,
                        default='auto')

    parser.add_argument('-fmin',
                        help="frequency minimum",
                        type=float,
                        default=10.0)

    parser.add_argument('-fmax',
                        help="frequency maximum",
                        type=float,
                        default=1e4)

    parser.add_argument('-o',
                        help="output (png,jpg,pdf,screen) | default: screen",
                        type=str,
                        default='screen')
    
    parser.add_argument('-gain',
                        help="gain",
                        type=str,
                        default='null')

    parser.add_argument('-t',
                        help="legend text",
                        type=str,
                        default='null')

    parser.add_argument('-w',
                        help="line width",
                        type=str,
                        default='null')

    parser.add_argument('-phase',
                        help='toggle phase',
                        action='store_true')

    parser.add_argument('-title',
                        help='plot title',
                        type=str,
                        default='null')
    
    args=parser.parse_args()

    return args.i,args.c,args.loc,args.amin, \
        args.amax,args.fmin,args.fmax,args.o, \
        args.gain,args.t,args.w,args.phase,args.title

# defaults
zero = 0
colors = 'null'
style = 'null'
alpha = 'null'
col = 1
ylabel = 'null'
xs = 12
ys = 6

pltfiles,c,loc,amin,amax,fmin,fmax,out,gain,t,width,phase,title = opts()

if pltfiles == 'null' and c == 'null':
    print('ERROR: (sbplot) No input files specified. Type sbplot -h for help.')
    sys.exit()

# list of filenames
myfiles = c.split(',')
n = len(myfiles)

name,ext = os.path.splitext(myfiles[0])

plt,ax = plotsetup(phase,ext)

color = ['black','red','green','blue','magenta','cyan','purple']
#-------------------------------------------------------------------------

#-------------------------------------------------------------------------
# Process datasets (comma separated list of frd files in c)

p = 0
for x in myfiles:
    try:
        data = np.genfromtxt(x,comments="#")
    except:
        print('ERROR: (sbplot) {} not found'.format(x))
        sys.exit()

    f = data[:,0]

    if gain == 'null':
        g = 0.0
    else:
        g = float(gain.split(',')[p])

    if phase:
        a = data[:,2]
    else:
        a = data[:,1] + g

    if t == 'null':
        # Watch for underscore
        word = x.replace(r'_',r'\_')
        label = r'$\mathrm{' +word+ '}$'
    else:
        label = r'$\mathrm{' + t.split(',')[p] + '}$'

    if colors == 'null':
        c0 = color[p]
    else:
        c0 = colors.split(',')[p]

    if style == 'null':
        s0 = '-'
    else:
        s0 = style.split(',')[p]

    if width == 'null':
        w0 = 1
    else:
        w0 = width.split(',')[p]

    if alpha == 'null':
        a0 = 1.0
    else:
        a0 = float(alpha.split(',')[p])

    if zero == 1:
        a[:] = a[:]-a[0]

    ax.plot(f,a,linewidth=w0,label=label,color=c0,linestyle=s0,alpha=a0)

    p = p + 1
#-------------------------------------------------------------------------

#-------------------------------------------------------------------------
# Generate plots

# Overide y-axis label
if ylabel != 'null':
    ax.set_ylabel(r'$'+ylabel+'$')

ax.set_xlim(float(fmin),float(fmax))
if amin != 'auto':
    ax.set_ylim(float(amin),float(amax))

ax.legend(loc=loc,ncol=col)
plt.tight_layout(pad=0.3)

if out == 'screen':
    plt.show()
else:
    plt.savefig(out)
    print('INFO: (sbplot) Wrote plot to {}'.format(out))
